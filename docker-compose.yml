services:
  api:
    container_name: api
    image: api
    env_file:
      - .env
    build:
      dockerfile: infrastructure/Dockerfile
      context: .
      args:
        - APP=api
    command: ["uvicorn", "src.apps.api.main:app", "--host", "0.0.0.0", "--port", "8080"]
    volumes:
      - ./src:/opt/pysetup/src
      - ./tests/apps/api:/opt/pysetup/tests/apps/api
    expose:
      - 8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-http.rule=Host(`api.test`)"
      - "traefik.http.routers.api-http.entrypoints=web"
    restart: unless-stopped

  queue:
    container_name: queue
    image: queue
    env_file:
      - .env
    build:
      dockerfile: infrastructure/Dockerfile
      context: .
      args:
        - APP=queue
    command: ["celery", "-A", "src.apps.queue.main:app", "worker"]
    profiles: [ "queue" ]
    volumes:
      - ./src:/opt/pysetup/src
      - ./tests/apps/queue:/opt/pysetup/tests/apps/queue

  cli:
    container_name: cli
    image: cli
    build:
      dockerfile: infrastructure/Dockerfile
      context: .
      args:
        - APP=cli
    profiles: ["command_runner"]
    volumes:
      - ./src:/opt/pysetup/src
      - ./tests/apps/cli:/opt/pysetup/tests/apps/cli

  database:
    image: postgres:16-alpine
    container_name: db
    env_file:
      - .env
    volumes:
      - type: volume
        source: postgres
        target: "/var/lib/postgresql/data"
        volume:
          nocopy: true
    restart: unless-stopped

  queue_broker:
    image: redis:latest
    container_name: queue-broker
    expose:
      - 6379
    volumes:
      - queue_broker_data:/data
    profiles: [ "queue" ]
    restart: unless-stopped

  queue_backend:
    image: redis:latest
    container_name: queue-backend
    volumes:
      - queue_backend_data:/data
    expose:
      - 6379
    profiles: [ "queue" ]
    restart: unless-stopped

  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - "--api.dashboard=true"
      - "--entrypoints.web.address=:80"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    volumes:
      - type: bind
        source: "/var/run/docker.sock"
        target: "/var/run/docker.sock"
        read_only: true
    ports:
      - "80:80/tcp"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.test`)"
      - "traefik.http.routers.traefik.service=api@internal"
    restart: unless-stopped

volumes:
  postgres:
  queue_broker_data:
  queue_backend_data:
